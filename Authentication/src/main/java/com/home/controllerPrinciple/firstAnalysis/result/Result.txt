Bad Example
Order		    NOF=2,NOPF=0,NOM=3,NOPM=3,LOC=14,WMC=3,NC=0,DIT=0,LCOM= 0.0,FANIN=1,FANOUT=0,Line no=3
Main		    NOF=0,NOPF=0,NOM=1,NOPM=1,LOC= 7,WMC=1,NC=0,DIT=0,LCOM=-1.0,FANIN=0,FANOUT=1,Line no=3

Good Example
Order		    NOF=2,NOPF=0,NOM=3,NOPM=3,LOC=14,WMC=3,NC=0,DIT=0,LCOM= 0.0,FANIN=2,FANOUT=0,Line no=3
OrderController	NOF=1,NOPF=0,NOM=2,NOPM=2,LOC=10,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=1,FANOUT=1,Line no=3
Main		    NOF=0,NOPF=0,NOM=1,NOPM=1,LOC= 7,WMC=1,NC=0,DIT=0,LCOM=-1.0,FANIN=0,FANOUT=2,Line no=3

firstAnalysis,com.home.controllerPrinciple.firstAnalysis.goodExample,OrderController,Feature Envy,
The tool detected a instance of this smell because processOrder is more interested in members of the type: Order

Bad Example:

Order:
FANIN = 1, FANOUT = 0: Order hat nur eine Abhängigkeit von der Main-Klasse und keine anderen Klassen, die von ihr abhängig sind.
LCOM = 0.0: Keine Unstimmigkeit bei der Kohäsion der Klasse, was bedeutet,
dass die Methoden gut zusammenarbeiten, ohne unnötige Abhängigkeiten.

Main:
FANOUT = 1: Main ist von Order abhängig, was zeigt, dass sie eine enge Kopplung mit Order hat.

Probleme im Bad Example:
Controller fehlt: Die Main-Klasse übernimmt sowohl die Steuerung der Geschäftslogik als auch die Interaktion mit den Modellen,
was das Controller Pattern verletzt. In einem besseren Design wäre der Controller verantwortlich
für die Koordination der Aktionen zwischen den Modellen.
Verletzung von Prinzipien der Kohäsion: Die Geschäftslogik und die Steuerungslogik sind zusammen in der Main-Klasse,
was die Wartbarkeit und Erweiterbarkeit erschwert.

Good Example:

Order:
FANIN = 2, FANOUT = 0: Die Order-Klasse ist von zwei Klassen abhängig: OrderController und Main.
Sie hat jedoch keine Abhängigkeiten nach außen, was ihre Kohäsion stärkt.

OrderController:
FANIN = 1, FANOUT = 1: Der Controller ist von der Order-Klasse abhängig und übernimmt die Steuerung über sie.
Der Controller hat selbst eine geringe Kopplung, da er nur für die Logik des Bestellvorgangs zuständig ist.

Main:
FANOUT = 2: Main kommuniziert nun mit dem OrderController und Order,
was eine saubere Trennung zwischen Geschäftslogik und Präsentation bedeutet.

Probleme im Good Example (Feature Envy):
Feature Envy: Das Tool hat in der OrderController-Klasse das "Feature Envy" Smell erkannt.
Dies bedeutet, dass die Methode processOrder zu sehr an den Interna der Order-Klasse interessiert ist.
In diesem Fall könnte die Geschäftslogik für das Verarbeiten einer Bestellung besser in der Order-Klasse selbst platziert werden,
anstatt den Controller für diese Aufgabe zu nutzen.
Dies ist jedoch ein sehr milder Fall und kann als Designentscheid berücksichtigt werden.
Empfehlung: Die Methode processOrder() könnte in der Order-Klasse integriert werden,
um die Verantwortlichkeiten weiter zu trennen.
Dies würde das Prinzip der Kohäsion stärken und die OrderController-Klasse von einer unnötigen Geschäftslogik befreien.
Zusammenfassung:
Bad Example: Die Main-Klasse übernimmt die Rolle des Controllers, was gegen das GRASP Controller Pattern verstößt.
Es gibt keine dedizierte Controller-Klasse, was die Trennung von Verantwortlichkeiten schwächt.

Good Example: Eine separate OrderController-Klasse übernimmt die Verantwortung für die Steuerung der Order-Klasse,
was zu einer besseren Trennung der Verantwortlichkeiten führt. Das Feature Envy zeigt jedoch an,
dass einige Logik in der OrderController-Klasse besser in die Order-Klasse verschoben werden könnte.

Die guten Metriken zeigen, dass das Controller Pattern besser angewendet wird,
jedoch könnte die Feature Envy als eine Verbesserungspotential in der Codequalität betrachtet werden.

Feature Envy sagt eigentlich den Controller wieder zu entfernen. Sehr seltsam.