Reading Type Metrics:

Bad Example
Main,           NOF=0, NOPF=0, NOM=1, NOPM=1, LOC=11, WMC=2, NC=0, DIT=0, LCOM=-1.0, FANIN=0, FANOUT=1, Line no=3
User,           NOF=3, NOPF=0, NOM=2, NOPM=2, LOC=13, WMC=2, NC=0, DIT=0, LCOM= 0.0, FANIN=1, FANOUT=0, Line no=3

Good Example
InputValidator, NOF=0, NOPF=0, NOM=2, NOPM=2, LOC= 8, WMC=2, NC=0, DIT=0, LCOM=-1.0, FANIN=1, FANOUT=0, Line no=3
Main,           NOF=0, NOPF=0, NOM=1, NOPM=1, LOC=12, WMC=2, NC=0, DIT=0, LCOM=-1.0, FANIN=0, FANOUT=2, Line no=3
User,           NOF=3, NOPF=0, NOM=3, NOPM=3, LOC=16, WMC=3, NC=0, DIT=0, LCOM= 0.0, FANIN=1, FANOUT=0, Line no=3

Reading Method Metrics:

Bad Example
Main,           LOC=9, CC=2, PC=1, Line no=4, Method Name=main
User,           LOC=5, CC=1, PC=3, Line no=8, Method Name=User
User,           LOC=3, CC=1, PC=0, Line no=14, Method Name=isValid

Good Example
InputValidator, LOC=3, CC=1, PC=1, Line no=4, Method Name=validateEmail
InputValidator, LOC=3, CC=1, PC=1, Line no=8, Method Name=validatePhoneNumber
Main,           LOC=10, CC=2, PC=1, Line no=4, Method Name=main
User,           LOC=5, CC=1, PC=3, Line no=8, Method Name=User
User,           LOC=3, CC=1, PC=0, Line no=14, Method Name=getEmail
User,           LOC=3, CC=1, PC=0, Line no=18, Method Name=getPhoneNumber

Analyse der Metriken
Bad Example
Type Metrics:

Die Klasse Main enthält eine einzige Methode (NOM=1), die scheinbar nicht delegiert. Ihr Fan-Out ist gering (FANOUT=1),
 was darauf hindeutet, dass die Logik nicht weiter ausgelagert wurde.
Die Klasse User hat sowohl Daten als auch Logik (NOM=2, NOF=3), was gegen Pure Fabrication spricht.
Die Methode isValid ist in der Klasse User enthalten, obwohl sie besser in eine dedizierte Hilfsklasse ausgelagert werden könnte.
Method Metrics:

Die Methode isValid innerhalb der Klasse User hat eine geringe Komplexität (CC=1)
und könnte leicht in eine Hilfsklasse verschoben werden, da sie von keiner anderen Methode der Klasse stark abhängt (PC=0).
Bewertung:
Im "Bad Example" wird das Pure-Fabrication-Prinzip nicht eingehalten, da User sowohl Datenhaltung als auch Validierungslogik enthält.
Die zentrale Idee von Pure Fabrication – die Trennung der Verantwortung und das Schaffen einer dedizierten Hilfsklasse
– wird nicht umgesetzt.

Good Example
Type Metrics:

Die Klasse InputValidator wurde eingeführt, um Validierungslogik aus der Klasse User auszulagern.
Sie hat zwei spezifische Methoden (NOM=2) mit klaren Verantwortlichkeiten (validateEmail, validatePhoneNumber)
und keine Datenhaltung (NOF=0).
Die Klasse Main hat ein höheres Fan-Out (FANOUT=2), was zeigt, dass sie zur Delegation von Aufgaben an andere Klassen genutzt wird,
was dem Prinzip entspricht.
Die Klasse User ist nun stärker auf Datenhaltung fokussiert und hat keine Validierungslogik mehr. Dies erhöht die Kohäsion (LCOM=0.0).
Method Metrics:

Die beiden Methoden validateEmail und validatePhoneNumber in InputValidator sind unabhängig und
haben eine geringe zyklomatische Komplexität (CC=1). Sie folgen dem Prinzip der Wiederverwendbarkeit.
Die Klasse User ist jetzt stärker fokussiert auf getter-Methoden (getEmail, getPhoneNumber),
was eine klarere Trennung von Verantwortlichkeiten zeigt.

Bewertung:
Im "Good Example" wurde das Pure-Fabrication-Prinzip eingehalten,
da die Validierungslogik vollständig in die dedizierte Klasse InputValidator ausgelagert wurde.
Dadurch wird die Kohäsion innerhalb der Klassen verbessert und die Wiederverwendbarkeit der Validierungslogik erhöht.

Zusammenfassung
"Bad Example": Pure Fabrication wurde nicht eingehalten, da Validierungslogik in der Klasse User verbleibt,
was zu einer Vermischung von Verantwortung führt.
"Good Example": Pure Fabrication wurde eingehalten, da die Validierungslogik sauber in die Klasse InputValidator ausgelagert wurde,
wodurch die Klassen kohäsiver und modularer wurden.
Das "Good Example" zeigt eine klare Trennung von Verantwortung und verbessert sowohl die Wartbarkeit
als auch die Wiederverwendbarkeit des Codes.