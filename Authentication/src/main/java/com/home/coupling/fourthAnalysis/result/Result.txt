Reading Type Metrics:

Bad Example:
Box, 		        NOF=1, NOPF=1, NOM=1, NOPM=1, LOC=6, WMC=1, NC=0, DIT=0, LCOM= 0.0, FANIN=1, FANOUT=0, Line no=3
Volume, 		    NOF=0, NOPF=0, NOM=1, NOPM=1, LOC=6, WMC=1, NC=0, DIT=0, LCOM=-1.0, FANIN=0, FANOUT=1, Line no=3

Good Example:
Box, 		        NOF=0, NOPF=0, NOM=1, NOPM=1, LOC=5, WMC=1, NC=0, DIT=1, LCOM=-1.0, FANIN=1, FANOUT=0, Line no=3
CalculateVolume, 	NOF=0, NOPF=0, NOM=1, NOPM=0, LOC=3, WMC=1, NC=1, DIT=0, LCOM=-1.0, FANIN=1, FANOUT=0, Line no=3
Main, 		        NOF=0, NOPF=0, NOM=1, NOPM=1, LOC=7, WMC=1, NC=0, DIT=0, LCOM=-1.0, FANIN=0, FANOUT=2, Line no=3

Reading Method Metrics:

Bad Example:
Box, 		        LOC=3, CC=1, PC=3, Line no=7, Method Name=Box
Volume, 		    LOC=4, CC=1, PC=1, Line no=5, Method Name=main

Good Example:
Box, 		        LOC=3, CC=1, PC=3, Line no=5, Method Name=volumeResult
CalculateVolume,    LOC=0, CC=1, PC=3, Line no=5, Method Name=volumeResult
Main, 		        LOC=5, CC=1, PC=1, Line no=5, Method Name=main

### **Analyse der Kopplung anhand der Metriken**

Die Kopplung (Coupling) beschreibt die Abhängigkeit zwischen Klassen oder Modulen innerhalb eines Softwaresystems.
Eine niedrige Kopplung ist entscheidend, um Wartbarkeit, Modularität und Erweiterbarkeit zu gewährleisten.
Anhand der vorliegenden Metriken lassen sich die Unterschiede zwischen einem schlechten und einem guten Entwurf analysieren.

---

#### **Bad Example**
Das schlechte Beispiel zeigt eine starke Kopplung zwischen den Klassen `Box` und `Volume`.

1. **Direkte Abhängigkeit:**
   - `Box` hat einen `FANIN`-Wert von 1, was bedeutet, dass eine andere Klasse (`Volume`) direkt mit dieser Klasse interagiert.
   - `Volume` hat einen `FANOUT`-Wert von 1, was eine direkte Abhängigkeit von der Klasse `Box` zeigt.
     Diese enge Bindung erhöht die Kopplung zwischen den Klassen.

2. **Fehlende Abstraktion:**
   - Die Implementierung ist starr und bietet keine Möglichkeit, die Berechnung der Volumenfunktion zu modularisieren oder zu erweitern.
     Es fehlt eine allgemeine Schnittstelle oder Abstraktion, die eine Trennung der Verantwortlichkeiten gewährleistet.

3. **Eingeschränkte Erweiterbarkeit:**
   - Die enge Kopplung erfordert bei Änderungen in der Klasse `Volume` auch Änderungen in der Klasse `Box`.
     Dies verstößt gegen das **Open/Closed-Prinzip**, da bestehender Code nicht unverändert erweitert werden kann.

---

#### **Good Example**
Das gute Beispiel reduziert die Kopplung durch die Einführung einer weiteren Klasse und Abstraktion.

1. **Entkopplung durch zusätzliche Schicht:**
   - Die neue Klasse `CalculateVolume` abstrahiert die Berechnungslogik und entkoppelt die Klassen `Box` und `Main`.
   - `Box` hat im guten Beispiel keinen `FANOUT` mehr, was darauf hinweist, dass sie nicht direkt auf andere Klassen zugreift.

2. **Zentrale Berechnungslogik:**
   - Die Klasse `CalculateVolume` übernimmt die Berechnung, was die Verantwortlichkeiten klar trennt.
     Dies ermöglicht die Wiederverwendung der Berechnungslogik unabhängig von der Klasse `Box`.

3. **Flexibilität und Erweiterbarkeit:**
   - Der `FANIN`-Wert der Klasse `CalculateVolume` ist 1, was zeigt, dass sie nur von einer anderen Klasse (`Main`) genutzt wird.
     Dies erleichtert die Wartung und Anpassung der Berechnungslogik, ohne andere Klassen zu beeinflussen.

4. **Verbesserte Modularität:**
   - Der Einsatz der Klasse `Main` mit einem `FANOUT` von 2 verdeutlicht, dass die Hauptklasse die Verantwortung übernimmt,
     die einzelnen Module zu orchestrieren, ohne die direkte Kopplung zwischen `Box` und `CalculateVolume`.

---

#### **Vergleich der Metriken**

| Metrik           | Bad Example (Box) | Good Example (Box) | Bad Example (Volume) | Good Example (CalculateVolume) | Good Example (Main) |
|-------------------|-------------------|--------------------|-----------------------|---------------------------------|---------------------|
| **FANOUT**       | 0                 | 0                  | 1                     | 0                               | 2                   |
| **FANIN**        | 1                 | 1                  | 0                     | 1                               | 0                   |
| **NC**           | 0                 | 0                  | 0                     | 1                               | 0                   |
| **DIT**          | 0                 | 1                  | 0                     | 0                               | 0                   |
| **WMC**          | 1                 | 1                  | 1                     | 1                               | 1                   |

Das gute Beispiel zeigt eine klarere Trennung der Verantwortlichkeiten durch die Einführung der zusätzlichen Klasse `CalculateVolume`,
was zu einer besseren Modularität und einem wartungsfreundlicheren Design führt.

---

#### **Methodenanalyse**

| Methode                | Bad Example (LOC/CC/PC) | Good Example (LOC/CC/PC) |
|-------------------------|-------------------------|--------------------------|
| `Box`                  | 3 / 1 / 3              | 3 / 1 / 3               |
| `volumeResult`         | N/A                    | 0 / 1 / 3               |
| `main` (Volume/Main)   | 4 / 1 / 1              | 5 / 1 / 1               |

Im guten Beispiel wird die Methode `volumeResult` in die Klasse `CalculateVolume` ausgelagert.
Dadurch wird die Berechnungslogik unabhängig von der Hauptklasse implementiert, was die Kopplung zwischen den Klassen reduziert.

---

### **Fazit**
Das schlechte Beispiel zeigt eine enge Kopplung zwischen den Klassen `Box` und `Volume`,
was die Wartbarkeit und Erweiterbarkeit des Systems einschränkt.
Durch die Einführung einer zusätzlichen Klasse im guten Beispiel wird die Kopplung reduziert,
die Verantwortlichkeiten klarer getrennt und die Modularität erhöht.
Dies erleichtert zukünftige Anpassungen und gewährleistet ein flexibleres und wartungsfreundlicheres Design.