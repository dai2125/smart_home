Warum ist das ein schlechtes Beispiel?
Überflüssige Klasse (WheelFactory):
Die Factory bringt keine Vorteile, sondern verkompliziert das Design,
da Bicycle die Verantwortung für die Erstellung seiner Abhängigkeiten auslagert.
Verlust von Kohäsion:
Bicycle benötigt die Wheels direkt, sollte daher für deren Erstellung verantwortlich sein, statt diese Aufgabe zu delegieren.
Erhöhte Komplexität:
WheelFactory erhöht die Anzahl der Klassen und die Abhängigkeiten, was das System schwerer wartbar macht.

Warum ist das ein gutes Beispiel?
Die Klasse Bicycle besitzt die Objekte Wheel und erstellt sie daher selbst.
Die Verantwortung für die Erstellung ist kohärent und logisch: Bicycle braucht Wheel, um zu funktionieren.
Es vermeidet unnötige externe Klassen oder Logik.

Zusammenfassung
Gutes Beispiel: Die Klasse, die das Objekt besitzt (Bicycle), ist für dessen Erstellung verantwortlich,
was Kohäsion und Einfachheit erhöht.
Schlechtes Beispiel: Eine zusätzliche Factory übernimmt die Erstellung, obwohl dies nicht notwendig ist,
was zu höherer Komplexität und schwächerer Kohäsion führt.

Im Bad Example hat Bicycle einen FANOUT=2 weil 2 mal die Wheel und die WheelFactory Klasse verwendet wird.
WheelFactory ist unnötig da sie nur zur erstellung von Wheel dient, LCOM=-1.0 weil keine Felder
die zur Erstellung von Wheel dienen.
WheelFactory hat einen FANIN=2 und einen FANOUT=1 da sie von zwei anderen Klassen genutzt wird,
aber sie nur von Wheel abhängig ist, bergrenzte Nützlichkeit.

Bad Example
Class Name=Bicycle		NOF=2,NOPF=0,NOM=2,NOPM=2,LOC=12,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=1,FANOUT=2,Line no=3
Class Name=Wheel		NOF=1,NOPF=0,NOM=2,NOPM=2,LOC= 9,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=2,FANOUT=0,Line no=3
Class Name=WheelFactory	NOF=0,NOPF=0,NOM=1,NOPM=1,LOC= 5,WMC=1,NC=0,DIT=0,LCOM=-1.0,FANIN=2,FANOUT=1,Line no=3
Class Name=Main		    NOF=0,NOPF=0,NOM=1,NOPM=1,LOC= 7,WMC=1,NC=0,DIT=0,LCOM=-1.0,FANIN=0,FANOUT=2,Line no=3

Good Example
Class Name=Bicycle		NOF=2,NOPF=0,NOM=2,NOPM=2,LOC=12,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=1,FANOUT=1,Line no=3
Class Name=Wheel		NOF=1,NOPF=0,NOM=2,NOPM=2,LOC= 9,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=1,FANOUT=0,Line no=3
Class Name=Main		    NOF=0,NOPF=0,NOM=1,NOPM=1,LOC= 6,WMC=1,NC=0,DIT=0,LCOM=-1.0,FANIN=0,FANOUT=1,Line no=3

Im Good Example einen FANOUT=1 nur eine Abhhängigkeit zu Wheel besteht,
das macht die Verantwortlichkeit klarer und erfüllt das Creator Prinzip.
Die Wheel Klasse hat nur noch einen FANIN=1 da die WheelFactory Klasse weggelassen wurde.
Main interargiert nur noch mit Bicycle was die Kopplung im System drastisch reduziert
und die Hauptverwantwortlichkeit auf Bicycle verlargert.

Schlechtes Beispiel
Hohe Kopplung: Die WheelFactory-Klasse führt zu zusätzlichen Abhängigkeiten, wodurch Bicycle und Main stärker gekoppelt werden.
Verlust von Kohäsion: Die Verantwortung für die Erstellung von Wheel wird an WheelFactory delegiert,
was die Kohäsion der Bicycle-Klasse verringert.
Komplexität: Die zusätzliche Klasse (WheelFactory) und die erhöhte Abhängigkeit belasten das System unnötig.

Gutes Beispiel
Geringe Kopplung: Bicycle ist nur mit Wheel verbunden, und Main interagiert ausschließlich mit Bicycle.
Dies führt zu einem modulareren Design.
Hohe Kohäsion: Bicycle übernimmt die Verantwortung für die Erstellung seiner Abhängigkeiten (Wheel),
wodurch die Klasse klarer und autonomer wird.
Einfachheit: Durch das Weglassen der WheelFactory wird das System weniger komplex und wartungsfreundlicher.
Das gute Beispiel zeigt deutlich, wie das GRASP Creator-Prinzip die Kohäsion und Modularität eines Designs stärkt,
während das schlechte Beispiel unnötige Klassen einführt, die Komplexität erhöhen und die Verantwortlichkeiten im System verwässern.