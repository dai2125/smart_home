Reading Type Metrics:

Bad Example:
Event,      NOF=1, NOPF=1, NOM=1, NOPM=1, LOC= 6, WMC=1, NC=0, DIT=0, LCOM= 0.0, FANIN=1, FANOUT=0, Line no=3
EventLog,   NOF=1, NOPF=1, NOM=2, NOPM=2, LOC= 9, WMC=2, NC=0, DIT=0, LCOM= 0.0, FANIN=1, FANOUT=1, Line no=6
Main,       NOF=0, NOPF=0, NOM=1, NOPM=1, LOC=10, WMC=2, NC=0, DIT=0, LCOM=-1.0, FANIN=0, FANOUT=1, Line no=3

Good Example:
Event,      NOF=1, NOPF=0, NOM=2, NOPM=2, LOC= 9, WMC=2, NC=0, DIT=0, LCOM= 0.0, FANIN=1, FANOUT=0, Line no=3
EventLog,   NOF=1, NOPF=0, NOM=3, NOPM=3, LOC=14, WMC=4, NC=0, DIT=0, LCOM= 0.0, FANIN=1, FANOUT=1, Line no=6
Main,       NOF=0, NOPF=0, NOM=1, NOPM=1, LOC= 8, WMC=1, NC=0, DIT=0, LCOM=-1.0, FANIN=0, FANOUT=1, Line no=3

Reading Method Metrics:

Bad Example:
Event,      LOC=3, CC=1, PC=1, Line no= 7, Method Name=Event
EventLog,   LOC=3, CC=1, PC=0, Line no=10, Method Name=EventLog
EventLog,   LOC=3, CC=1, PC=1, Line no=14, Method Name=addEvent
Main,       LOC=8, CC=2, PC=1, Line no= 5, Method Name=main

Good Example:
Event,      LOC=3, CC=1, PC=1, Line no= 7, Method Name=Event
Event,      LOC=3, CC=1, PC=0, Line no=11, Method Name=getDescription
EventLog,   LOC=3, CC=1, PC=0, Line no=10, Method Name=EventLog
EventLog,   LOC=3, CC=1, PC=1, Line no=14, Method Name=addEvent
EventLog,   LOC=5, CC=2, PC=0, Line no=18, Method Name=printLog
Main,       LOC=6, CC=1, PC=1, Line no= 5, Method Name=main



### Analyse des **Creator (B records A)** GRASP-Patterns

Das **Creator (B records A)**-Pattern beschreibt eine Designentscheidung,
bei der eine Klasse **B** für das Erstellen von Instanzen der Klasse **A** verantwortlich ist,
weil **B** die Zustände oder die Daten für **A** aufzeichnet oder speichert. Das bedeutet, dass **B** die Verantwortung
für die Erstellung und Speicherung von **A** übernimmt, da es als der natürliche Ort für die Speicherung der Daten betrachtet wird.

In diesem Fall müssen wir analysieren, ob **EventLog** die Verantwortung für das Aufzeichnen von **Event**-Instanzen übernimmt
und ob **EventLog** die Instanziierung von **Event** durchführt, basierend auf den Metriken, die uns gegeben wurden.

---

### **Bad Example:**

1. **Event:**
   - **FANIN = 1**, **FANOUT = 0**
   - **Event** scheint von **EventLog** abhängt, aber es erstellt keine Instanzen oder speichert Daten von anderen Klassen.
     Es könnte sich um eine passive Entität handeln, die lediglich Daten enthält, ohne für deren Verwaltung verantwortlich zu sein.
     In diesem Fall scheint **Event** nicht direkt dafür verantwortlich zu sein, **Event**-Instanzen zu erstellen oder zu speichern,
     sondern nur Daten zu verwalten.

2. **EventLog:**
   - **FANIN = 1**, **FANOUT = 1**
   - **EventLog** hat eine **FANIN** von 1, was bedeutet, dass es von einer anderen Klasse (möglicherweise **Main**) abhängt,
     aber es hat eine **FANOUT** von 1, was darauf hinweist, dass es **Event**-Instanzen erstellt oder verwendet.
     Die Methode `addEvent` scheint dazu verwendet zu werden, ein Event in das Log zu integrieren. **EventLog** speichert
     also **Event**-Instanzen, ist aber nicht direkt dafür verantwortlich, sie zu erstellen.

3. **Main:**
   - **FANIN = 0**, **FANOUT = 1**
   - **Main** hat einen **FANOUT** von 1 und ruft die Methode von **EventLog** auf, um **Event** zu verwenden.
     Allerdings scheint **Main** keine direkte Verantwortung für das Aufzeichnen oder Erstellen von **Event**-Instanzen zu übernehmen.
     Es interagiert lediglich mit **EventLog**.

Im **Bad Example** wird das **Creator (B records A)**-Pattern nur unzureichend umgesetzt. Während **EventLog** **Event**-Instanzen speichert,
übernimmt es nicht direkt die vollständige Verantwortung für deren Erstellung. **Main** könnte auch als eine Instanz gesehen werden,
die mit **EventLog** zusammenarbeitet, jedoch nicht die Verantwortung für die Erstellung von **Event** übernimmt.

---

### **Good Example:**

1. **Event:**
   - **FANIN = 1**, **FANOUT = 0**
   - **Event** ist eine einfache Klasse, die anscheinend Daten über ein Ereignis aufzeichnet,
     aber keine weiteren Instanzen erstellt. Sie ist passiv in Bezug auf die Instanziierung von Objekten und enthält
     nur grundlegende Informationen. Es hat keine explizite Verantwortung für das Erstellen oder Speichern von anderen Objekten.

2. **EventLog:**
   - **FANIN = 1**, **FANOUT = 1**
   - **EventLog** hat eine **FANIN** von 1 und eine **FANOUT** von 1, was darauf hindeutet, dass es mit **Event**-Instanzen arbeitet,
     aber keine von ihnen erstellt. Es verwendet die Methode `addEvent`, um **Event**-Instanzen in das Log zu speichern.
     Jedoch könnte die **Creator**-Verantwortung von **EventLog** darin bestehen, die **Event**-Instanzen
     zu speichern und ihre Existenz zu verwalten.

3. **Main:**
   - **FANIN = 0**, **FANOUT = 1**
   - **Main** hat eine **FANOUT** von 1, was darauf hinweist, dass es mit **EventLog** interagiert,
     aber keine direkte Verantwortung für die Erstellung oder Speicherung von **Event**-Instanzen trägt.
     Es ruft lediglich die Methoden von **EventLog** auf, um mit **Event** zu arbeiten.

Im **Good Example** wird das **Creator (B records A)**-Pattern durch **EventLog** eher umgesetzt.
**EventLog** speichert **Event**-Instanzen, indem es sie mit der Methode `addEvent` hinzufügt.
Obwohl **EventLog** die Instanzen von **Event** speichert, wird jedoch nicht direkt ersichtlich,
dass es auch für deren Erstellung verantwortlich ist. Das **Creator-Pattern** könnte im **Good Example** weiter gestärkt werden,
wenn **EventLog** auch die Verantwortung für das Erstellen von **Event** übernimmt, anstatt nur für deren Speicherung.

---

### **Methodenanalyse:**

1. **EventLog:**
   - **Methoden:** `addEvent`, `printLog`
   - **addEvent** wird verwendet, um ein **Event** zu einem Log hinzuzufügen. Dies deutet darauf hin,
     dass **EventLog** für die Verwaltung der Instanzen von **Event** zuständig ist,
     aber nicht für deren Erstellung. Es wird lediglich eine **Event**-Instanz gespeichert, aber nicht initialisiert.

2. **Event:**
   - **Methoden:** `getDescription`
   - **Event** speichert grundlegende Informationen, aber keine Daten anderer Objekte.
     Es hat keine direkte Verantwortung, andere Instanzen zu erstellen oder zu speichern.

Im **Good Example** könnte das **Creator-Pattern** durch **EventLog** besser eingehalten werden, wenn **EventLog** auch
die Verantwortung für die Erstellung von **Event**-Instanzen übernimmt und nicht nur deren Speicherung.
Aktuell scheint **EventLog** nur die Rolle des Aufzeichnens und Verwaltens zu spielen.

---

### **Fazit**

Das **Creator (B records A)**-Pattern wird im **Good Example** teilweise umgesetzt, da **EventLog** **Event**-Instanzen speichert.
Jedoch ist die vollständige Umsetzung dieses Musters fraglich,
weil **EventLog** nicht eindeutig die Verantwortung für das Erstellen von **Event** übernimmt.
Eine Verbesserung des **Good Example** würde darin bestehen, dass **EventLog** auch als **Creator** von **Event**-Instanzen fungiert,
indem es sie nicht nur speichert, sondern auch ihre Initialisierung vornimmt.

Im **Bad Example** wird das **Creator (B records A)**-Pattern nicht vollständig umgesetzt,
da **EventLog** zwar **Event** speichert, aber nicht die Verantwortung für deren Erstellung übernimmt.
**Main** ist ebenfalls nicht der **Creator** von **Event**, sondern verwendet einfach vorhandene Instanzen.