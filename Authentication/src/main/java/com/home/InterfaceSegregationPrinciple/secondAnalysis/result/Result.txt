Reading Type Metrics:

Bad Example:
BankPayment, 	NOF=3, NOPF=0, NOM=6, NOPM=6, LOC=25, WMC=6, NC=0, DIT=1, LCOM= 0.5, FANIN=0, FANOUT=0, Line no=6
LoanPayment, 	NOF=4, NOPF=0, NOM=6, NOPM=6, LOC=31, WMC=6, NC=0, DIT=1, LCOM= 0.3333333333333333, FANIN=0, FANOUT=0, Line no=6
Payment, 		NOF=0, NOPF=0, NOM=5, NOPM=0, LOC= 7, WMC=5, NC=2, DIT=0, LCOM=-1.0, FANIN=0, FANOUT=0, Line no=5

Good Example:
Bank, 		    NOF=0, NOPF=0, NOM=1, NOPM=0, LOC= 3, WMC=1, NC=1, DIT=1, LCOM=-1.0, FANIN=0, FANOUT=0, Line no=3
BankPayment, 	NOF=3, NOPF=0, NOM=4, NOPM=4, LOC=19, WMC=4, NC=0, DIT=2, LCOM= 0.0, FANIN=0, FANOUT=0, Line no=6
Loan, 		    NOF=0, NOPF=0, NOM=2, NOPM=0, LOC= 4, WMC=2, NC=1, DIT=1, LCOM=-1.0, FANIN=0, FANOUT=0, Line no=3
LoanPayment, 	NOF=4, NOPF=0, NOM=5, NOPM=5, LOC=28, WMC=5, NC=0, DIT=2, LCOM= 0.0, FANIN=0, FANOUT=0, Line no=6
Payment, 		NOF=0, NOPF=0, NOM=2, NOPM=0, LOC= 4, WMC=2, NC=2, DIT=0, LCOM=-1.0, FANIN=0, FANOUT=0, Line no=5

Reading Method Metrics:

Bad Example:
BankPayment, 	LOC=5, CC=1, PC=3, Line no=12, Method Name=BankPayment
BankPayment, 	LOC=3, CC=1, PC=0, Line no=18, Method Name=initiatePayments
BankPayment, 	LOC=3, CC=1, PC=0, Line no=23, Method Name=status
BankPayment, 	LOC=3, CC=1, PC=0, Line no=28, Method Name=getPayments
BankPayment, 	LOC=3, CC=1, PC=0, Line no=33, Method Name=initialLoanSettlement
BankPayment, 	LOC=3, CC=1, PC=0, Line no=38, Method Name=initiateRePayment
LoanPayment, 	LOC=6, CC=1, PC=3, Line no=13, Method Name=LoanPayment
LoanPayment, 	LOC=3, CC=1, PC=0, Line no=20, Method Name=initiatePayments
LoanPayment, 	LOC=3, CC=1, PC=0, Line no=25, Method Name=status
LoanPayment, 	LOC=3, CC=1, PC=0, Line no=30, Method Name=getPayments
LoanPayment, 	LOC=5, CC=1, PC=0, Line no=35, Method Name=initialLoanSettlement
LoanPayment, 	LOC=5, CC=1, PC=0, Line no=42, Method Name=initiateRePayment
Payment, 		LOC=0, CC=1, PC=0, Line no= 7, Method Name=initiatePayments
Payment, 		LOC=0, CC=1, PC=0, Line no= 8, Method Name=status
Payment, 		LOC=0, CC=1, PC=0, Line no= 9, Method Name=getPayments
Payment, 		LOC=0, CC=1, PC=0, Line no=10, Method Name=initialLoanSettlement
Payment, 		LOC=0, CC=1, PC=0, Line no=11, Method Name=initiateRePayment

Good Example:
Bank, 		    LOC=0, CC=1, PC=0, Line no= 5, Method Name=initiatePayments
BankPayment, 	LOC=5, CC=1, PC=3, Line no=12, Method Name=BankPayment
BankPayment, 	LOC=3, CC=1, PC=0, Line no=18, Method Name=initiatePayments
BankPayment, 	LOC=3, CC=1, PC=0, Line no=23, Method Name=status
BankPayment, 	LOC=3, CC=1, PC=0, Line no=28, Method Name=getPayments
Loan, 		    LOC=0, CC=1, PC=0, Line no= 5, Method Name=initiateLoanSettlement
Loan, 		    LOC=0, CC=1, PC=0, Line no= 6, Method Name=initiateRePayment
LoanPayment, 	LOC=6, CC=1, PC=3, Line no=13, Method Name=LoanPayment
LoanPayment, 	LOC=5, CC=1, PC=0, Line no=20, Method Name=initiateLoanSettlement
LoanPayment, 	LOC=5, CC=1, PC=0, Line no=27, Method Name=initiateRePayment
LoanPayment, 	LOC=3, CC=1, PC=0, Line no=34, Method Name=status
LoanPayment, 	LOC=3, CC=1, PC=0, Line no=39, Method Name=getPayments
Payment, 		LOC=0, CC=1, PC=0, Line no= 7, Method Name=status
Payment, 		LOC=0, CC=1, PC=0, Line no= 8, Method Name=getPayments

### **Analyse des Interface Segregation Principle (ISP) anhand der Metriken**

Das Interface Segregation Principle (ISP) ist ein Grundsatz der SOLID-Prinzipien, der besagt, dass eine Schnittstelle nicht mehr Methoden anbieten sollte, als eine Implementierung tatsächlich benötigt. Dadurch wird verhindert, dass Klassen gezwungen werden, Methoden zu implementieren, die für sie nicht sinnvoll sind.

---

#### **Bad Example**
In der schlechten Umsetzung zeigt sich eine Verletzung des ISP deutlich anhand der folgenden Beobachtungen:

1. **Zwang zu leeren oder unsinnigen Implementierungen:**
   - Sowohl `BankPayment` als auch `LoanPayment` implementieren das `Payment`-Interface, das fünf Methoden vorgibt (`initiatePayments`, `status`, `getPayments`, `initialLoanSettlement`, `initiateRePayment`).
   - Methoden wie `initialLoanSettlement` und `initiateRePayment` sind für `BankPayment` irrelevant, was dazu führt, dass diese Methoden mit `UnsupportedOperationException` gefüllt werden. Dies ist ein typisches Zeichen für eine Verletzung des ISP.

2. **Metadaten bestätigen die Überfrachtung des Interfaces:**
   - Das `Payment`-Interface hat `NOM=5`, was auf eine umfangreiche Schnittstelle hinweist. Da alle Methoden von den Implementierungen übernommen werden müssen, erhöht dies die Komplexität der Klassen.
   - In der schlechten Umsetzung haben sowohl `BankPayment` als auch `LoanPayment` `WMC=6`. Die hohe Anzahl an Methodenkomplexität resultiert direkt aus der breiten Schnittstelle.

3. **Nutzlose Verbindungen:**
   - Die schlechte LCOM (Lack of Cohesion of Methods) von `0.5` (BankPayment) und `0.333` (LoanPayment) zeigt, dass die Methoden in diesen Klassen nur lose zusammenhängen. Ein Indikator dafür, dass die Klassen unnötig viele Aufgaben übernehmen.

---

#### **Good Example**
In der guten Umsetzung wurde das ISP berücksichtigt, indem die Schnittstellen spezifiziert wurden. Das führt zu einer klareren und kohärenteren Struktur:

1. **Spezifischere Schnittstellen:**
   - Statt einer einzelnen großen Schnittstelle `Payment` wurden kleinere, aufgabenorientierte Schnittstellen wie `Bank` und `Loan` eingeführt. Diese enthalten jeweils nur die relevanten Methoden (`NOM=1` für `Bank` und `NOM=2` für `Loan`).
   - `Payment` ist nun eine allgemeine Schnittstelle mit nur `NOM=2` (`status` und `getPayments`), die von allen Implementierungen benötigt werden. Dies verhindert unnötige Methoden in Klassen.

2. **Reduzierte Komplexität:**
   - Die Workload-Method-Complexity (WMC) von `BankPayment` und `LoanPayment` beträgt in der guten Umsetzung nur `WMC=4` bzw. `WMC=5`. Dies zeigt eine klarere und besser strukturierte Implementierung.
   - Die LCOM-Werte für `BankPayment` und `LoanPayment` sind `0.0`, was auf eine gute Kohäsion innerhalb der Klassen hinweist. Dies bedeutet, dass die Methoden innerhalb einer Klasse zusammenarbeiten, um ein einziges Ziel zu erreichen.

3. **Modularität:**
   - Die Verwendung spezifischer Schnittstellen macht es einfacher, Klassen unabhängig zu ändern oder zu erweitern. Beispielsweise könnte die `BankPayment`-Klasse nun erweitert werden, ohne Auswirkungen auf `LoanPayment` zu haben.

---

#### **Vergleich der Metriken**
| Metrik           | Bad Example (BankPayment) | Good Example (BankPayment) | Bad Example (LoanPayment) | Good Example (LoanPayment) |
|-------------------|---------------------------|----------------------------|---------------------------|----------------------------|
| **NOF**          | 3                         | 3                          | 4                         | 4                          |
| **NOM**          | 6                         | 4                          | 6                         | 5                          |
| **LOC**          | 25                        | 19                         | 31                        | 28                         |
| **WMC**          | 6                         | 4                          | 6                         | 5                          |
| **LCOM**         | 0.5                       | 0.0                        | 0.333                     | 0.0                        |

Die Werte zeigen deutlich, dass die guten Beispiele besser strukturiert und weniger komplex sind.

---

### **Fazit**
Die schlechte Umsetzung verletzt das Interface Segregation Principle, indem Klassen gezwungen werden, irrelevante Methoden zu implementieren. Dies führt zu unnötiger Komplexität, schlechter Kohäsion und einer erhöhten Wahrscheinlichkeit von Fehlern. Die gute Umsetzung löst dieses Problem durch:
- Aufteilung großer Interfaces in kleinere, spezifische Schnittstellen.
- Fokussierte und kohärente Klassen.
- Reduzierung der Methodenkomplexität.

Die Metriken belegen, dass die Einhaltung des ISP nicht nur den Code klarer und wartbarer macht, sondern auch die Qualität der Softwareentwicklung erheblich verbessert.