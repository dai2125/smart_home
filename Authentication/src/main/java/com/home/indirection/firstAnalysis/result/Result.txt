Warum ist das ein gutes Beispiel?
Indirection wird hier verwendet, um den Zugriff auf die Daten durch die Einführung der Klasse DataAccessLayer zu abstrahieren.
Vorteile:
Reduzierte Kopplung: DataDisplay und Database sind nicht direkt miteinander verbunden.
DataDisplay interagiert nur mit DataAccessLayer.
Flexibilität: Wenn der Zugriff auf die Datenquelle geändert werden muss (z. B. von einer Datenbank zu einer API),
muss nur DataAccessLayer angepasst werden, ohne andere Klassen zu beeinflussen.
Erhöhte Testbarkeit: Man kann DataAccessLayer isoliert testen,
da es eine klare Schnittstelle zur Interaktion mit der Datenquelle bietet.

Warum ist das ein schlechtes Beispiel?
Unnötige Indirection: Hier wurde das Prinzip der Indirection übermäßig angewendet.
Wir haben vier Klassen (Database, DataManager, DataHandler, und DataPresenter),
die im Wesentlichen die gleiche Aufgabe übernehmen: Daten von der Database zu erhalten und sie darzustellen.
Erhöhte Komplexität: Das Design führt zu unnötiger Komplexität, da jede Klasse nur eine einfache Aufgabe übernimmt,
aber durch die vielen Schichten wird der Code unnötig kompliziert.
Keine wirklichen Vorteile: Es gibt keinen offensichtlichen Nutzen aus der Einführung dieser vielen Schichten.
In einem echten Szenario könnte man stattdessen direkt auf die Database zugreifen oder nur eine Schicht der Vermittlung einführen.

Zusammenfassung der Beispiele
Gutes Beispiel:
Indirection wird sinnvoll verwendet, um die Kopplung zu reduzieren und die Flexibilität zu erhöhen.
Hier wurde eine Vermittlungsschicht (DataAccessLayer) eingeführt,
um die Interaktion zwischen Database und DataDisplay zu abstrahieren. Dies führt zu einem klareren,
flexibleren und leichter wartbaren System.
Schlechtes Beispiel:
Unnötige Indirection führt zu einer unnötigen Komplexität. Die vielen Schichten,
die lediglich die gleiche Aufgabe übernehmen, bieten keinen echten Mehrwert und machen das System schwerer verständlich und wartbar.
Das gute Beispiel zeigt, wie Indirection effektiv eingesetzt werden kann, um die Flexibilität und Wartbarkeit zu verbessern,
während das schlechte Beispiel zeigt, wie das Prinzip übermäßig und ohne klaren Nutzen angewendet werden kann.

Bad Example
Database		NOF=0,NOPF=0,NOM=1,NOPM=1,LOC=5,WMC=1,NC=0,DIT=0,LCOM=-1.0,FANIN=2,FANOUT=0,Line no=3
DataHandler		NOF=1,NOPF=0,NOM=2,NOPM=2,LOC=9,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=2,FANOUT=1,Line no=3
DataManager		NOF=1,NOPF=0,NOM=2,NOPM=2,LOC=9,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=2,FANOUT=1,Line no=3
DataPresenter	NOF=1,NOPF=0,NOM=2,NOPM=2,LOC=9,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=1,FANOUT=1,Line no=3
Main		    NOF=0,NOPF=0,NOM=1,NOPM=1,LOC=9,WMC=1,NC=0,DIT=0,LCOM=-1.0,FANIN=0,FANOUT=4,Line no=3

Good Example
Database		NOF=0,NOPF=0,NOM=1,NOPM=1,LOC=5,WMC=1,NC=0,DIT=0,LCOM=-1.0,FANIN=2,FANOUT=0,Line no=3
DataAccessLayer	NOF=1,NOPF=0,NOM=2,NOPM=2,LOC=9,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=2,FANOUT=1,Line no=3
DataDisplay		NOF=1,NOPF=0,NOM=2,NOPM=2,LOC=9,WMC=2,NC=0,DIT=0,LCOM= 0.0,FANIN=1,FANOUT=1,Line no=3
Main		    NOF=0,NOPF=0,NOM=1,NOPM=1,LOC=8,WMC=1,NC=0,DIT=0,LCOM=-1.0,FANIN=0,FANOUT=3,Line no=3

Hier ist einzig der FANOUT=3 zu FANOUT=4 erwähnenswert, da eine zusätzliche Klasse im Bad Example
eingefügt wurde, ansonsten verhalten sich NOM zu WMC angemessen und die LCOM Werte ebenso.
